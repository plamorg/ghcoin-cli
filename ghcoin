#!/usr/bin/env python

import csv
import sys
import subprocess

from subprocess import CompletedProcess
from typing import List

def main():
    args: List[str] = sys.argv[1:]
    if len(args) == 0:
        print_help()
        sys.exit(0)

    execute_command(args)

def execute_command(args: List[str]):
    match args:
        case ['register']:
            name: str = get_gh_username()
            register(name)
        case ['register', *_]:
            error_and_exit("Expected no arguments for user to register")
        case 'help' | '-h' | '--help':
            print_help()
            sys.exit(0)
        case _:
            error_and_exit(f"Unknown command")

def get_gh_username() -> str:
    command: str = "gh auth status"
    args: List[str] = command.split(" ")
    result: CompletedProcess = subprocess.run(args, capture_output=True, text=True)

    if result.returncode != 0:
        error_and_exit("Log in to the `gh` CLI tool")

    lines: List[str] = result.stderr.split("\n")
    username_line: str = lines[1]
    words: List[str] = username_line.split(" ")
    name_index: int = words.index("as") + 1
    name: str = words[name_index]

    return name

# Register the given name onto the ledger
def register(name: str):
    ledger_name: str = "ledger.csv"
    if is_user_in_ledger(ledger_name, name):
        error_and_exit(f"Cannot register an existing user \"{name}\"")
    register_user_into_ledger(ledger_name, name)

def is_user_in_ledger(ledger_name: str, name: str) -> bool:
    with open(ledger_name, newline='') as ledgerfile:
        reader = csv.reader(ledgerfile, delimiter=",")
        reader.__next__() # Skip the column descriptors
        
        return any(name == line[0] for line in reader)

def register_user_into_ledger(ledger_name: str, name: str):
    with open(ledger_name, 'a', newline='') as ledgerfile:
        writer = csv.writer(ledgerfile, delimiter=',', lineterminator='\n')
        contents: List[str] = f"{name},0".split(",")
        writer.writerow(contents)
        success_and_exit(f"Registered user \"{name}\" into ledger")

# Print the help message
def print_help():
    core_commands_list: List = [
        ("send <recipient> <amount>", "Send the specified recipient the given amount"),
        ("balance [user ...]", "Retrieve the balance of self or the specified user(s)"),
        ("list", "List valid recipients"),
        ("register <user>", "Register a user onto the ledger"),
        ("help, -h, --help", "List this help message")
    ]
    core_commands: str = format_commands_list(core_commands_list)
    help_message: str = \
f"""Control your transactions from the command line.

USAGE:
    ghcoin <command> <subcommand>

CORE COMMANDS:
{core_commands}
"""
    print(help_message)

# Format a list of commands for printing in the help message
def format_commands_list(commands: List) -> str:
    lines: List[str] = list()
    command_column_len: int = max(len(c[0]) for c in commands) + 2
    for command in commands:
        padding_len: int = command_column_len - len(command[0])
        padding: str = " " * padding_len
        line: str = "    " + command[0] + padding + command[1]
        lines.append(line)
    formatted: str = "\n".join(lines)
    return formatted

def error_and_exit(msg: str):
    formatted_msg: str = "\x1b[31mERROR\x1b[39m: " + msg
    print(formatted_msg)
    sys.exit(1)

def success_and_exit(msg: str):
    formatted_msg: str = "\x1b[32mSUCCESS\x1b[39m: " + msg
    print(formatted_msg)
    sys.exit(0)

main()
